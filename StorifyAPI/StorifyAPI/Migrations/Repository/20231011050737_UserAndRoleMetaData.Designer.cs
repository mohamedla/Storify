// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StorifyAPI.Migrations.Repository
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231011050737_UserAndRoleMetaData")]
    partial class UserAndRoleMetaData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmployeeId");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("EmployeeCode");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f9e4c537-87d6-810f-9a73-2754e9111870"),
                            Age = 24,
                            Code = "299159",
                            Name = "Mohamed Ashraf",
                            StoreId = new Guid("80abbca8-664d-4b20-b5de-024705497d4a")
                        });
                });

            modelBuilder.Entity("Entities.Models.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "secure");

                    b.HasData(
                        new
                        {
                            Id = "496edaa7-eadf-481d-89ea-9172e7333b87",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "496edaa7-eadf-8a02-b160-c4a2e7333b87",
                            Email = "Admin@Storify.com",
                            EmailConfirmed = false,
                            FirstName = "Administrator",
                            IsActive = true,
                            LastName = "UserRole",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@STORIFY.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMLMO+FoeOqPzBHBaSoxn+4Abu7aXjrkbwc65ehRXxLEGgNhaOB6Ln17ud6ZUKvwPQ==",
                            PhoneNumber = "0201122216440",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "496edaa7-eadf-5ade-8195-c4a2e7333b87",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MGroupId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("GlobalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid>("MTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MTypeId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("MTypeId");

                    b.ToTable("MaterialGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("496edaa7-2a6e-481d-b160-c4a2e7333b87"),
                            Code = "Antibiotic",
                            GlobalName = "Antibiotics",
                            LocalName = "مضادات حيوية",
                            MTypeId = new Guid("496edaa7-b9eb-481d-b160-c4a2e7333b87")
                        },
                        new
                        {
                            Id = new Guid("c12bb473-7ef5-4d1b-aa11-ed60a12038b7"),
                            Code = "Painkiller",
                            GlobalName = "Painkillers",
                            LocalName = "مسكنات",
                            MTypeId = new Guid("496edaa7-b9eb-481d-b160-c4a2e7333b87")
                        },
                        new
                        {
                            Id = new Guid("3374144b-9876-45ba-aa75-d9a836a7a441"),
                            Code = "SparePart",
                            GlobalName = "Spare Parts",
                            LocalName = "قطع غيار",
                            MTypeId = new Guid("3374144b-ffdd-45ba-aa75-d9a836a7a441")
                        },
                        new
                        {
                            Id = new Guid("3374144b-ffdd-45ba-98ef-d9a836a7a441"),
                            Code = "Raw",
                            GlobalName = "Raw Materials",
                            LocalName = "مواد خام",
                            MTypeId = new Guid("3374144b-ffdd-45ba-aa75-d9a836a7a441")
                        });
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MItemId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("GlobalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid>("MGroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MGroupId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("MGroupId");

                    b.ToTable("MaterialItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("496edaa7-2a6e-481d-abcd-c4a2e7333b87"),
                            Code = "Antibiotic",
                            GlobalName = "Antibiotic",
                            LocalName = "مضاد حيوي",
                            MGroupId = new Guid("496edaa7-2a6e-481d-b160-c4a2e7333b87")
                        },
                        new
                        {
                            Id = new Guid("c12bb473-7ef5-4d1b-2245-ed60a12038b7"),
                            Code = "Painkiller",
                            GlobalName = "Painkiller",
                            LocalName = "مسكن",
                            MGroupId = new Guid("c12bb473-7ef5-4d1b-aa11-ed60a12038b7")
                        },
                        new
                        {
                            Id = new Guid("3374144b-9876-78ef-aa75-d9a836a7a441"),
                            Code = "SparePart",
                            GlobalName = "Spare Part",
                            LocalName = "قطعة غيار",
                            MGroupId = new Guid("3374144b-9876-45ba-aa75-d9a836a7a441")
                        },
                        new
                        {
                            Id = new Guid("3374144b-ad35-45ba-98ef-d9a836a7a441"),
                            Code = "Raw",
                            GlobalName = "Raw Material",
                            LocalName = "مادة خام",
                            MGroupId = new Guid("3374144b-ffdd-45ba-98ef-d9a836a7a441")
                        });
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialItemUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MItemUnitId");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("Money");

                    b.Property<int>("CFactor")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MItemId");

                    b.Property<decimal>("LastPrice")
                        .HasColumnType("Money");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MUnitId");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("ItemId", "UnitId")
                        .IsUnique();

                    b.ToTable("MaterialItemUnit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("496edaa7-98ce-e45d-90ae-c4a2e7333b87"),
                            AveragePrice = 5m,
                            CFactor = 7,
                            IsMain = true,
                            ItemId = new Guid("496edaa7-2a6e-481d-abcd-c4a2e7333b87"),
                            LastPrice = 6m,
                            UnitId = new Guid("c12bb473-adfe-4d1b-2245-ed60a12038b7"),
                            UnitPrice = 12.5m
                        },
                        new
                        {
                            Id = new Guid("496edaa7-98ce-e45d-a34d-c4a2e7333b87"),
                            AveragePrice = 5m,
                            CFactor = 7,
                            IsMain = false,
                            ItemId = new Guid("496edaa7-2a6e-481d-abcd-c4a2e7333b87"),
                            LastPrice = 6m,
                            UnitId = new Guid("496edaa7-76ea-481d-abcd-c4a2e7333b87"),
                            UnitPrice = 12.5m
                        });
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MTypeID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("GlobalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MaterialType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("496edaa7-b9eb-481d-b160-c4a2e7333b87"),
                            Code = "Drug",
                            GlobalName = "Drugs",
                            LocalName = "أدوية"
                        },
                        new
                        {
                            Id = new Guid("c12bb473-661f-4d1b-aa11-ed60a12038b7"),
                            Code = "Assets",
                            GlobalName = "Fixed Assets",
                            LocalName = "أصول ثايتة"
                        },
                        new
                        {
                            Id = new Guid("3374144b-ffdd-45ba-aa75-d9a836a7a441"),
                            Code = "Consumptions",
                            GlobalName = "Consumptions",
                            LocalName = "مستهلكات"
                        });
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MUnitId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("GlobalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MaterialUnit");

                    b.HasData(
                        new
                        {
                            Id = new Guid("496edaa7-76ea-481d-abcd-c4a2e7333b87"),
                            Code = "Box",
                            GlobalName = "Box ",
                            LocalName = "علبة"
                        },
                        new
                        {
                            Id = new Guid("c12bb473-adfe-4d1b-2245-ed60a12038b7"),
                            Code = "Bottle",
                            GlobalName = "Bottle",
                            LocalName = "زجاجة"
                        },
                        new
                        {
                            Id = new Guid("3374144b-1082-78ef-aa75-d9a836a7a441"),
                            Code = "Each",
                            GlobalName = "Each",
                            LocalName = "وحدة"
                        },
                        new
                        {
                            Id = new Guid("3374144b-ad35-45ba-afed-d9a836a7a441"),
                            Code = "Carton",
                            GlobalName = "Carton",
                            LocalName = "كارتونة"
                        });
                });

            modelBuilder.Entity("Entities.Models.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("StoreID");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("StoreCode");

                    b.Property<int?>("CostCenterID")
                        .HasColumnType("int");

                    b.Property<string>("GlobalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StoreGName");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StoreLName");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            Code = "MainStore",
                            GlobalName = "Main Matrial Store",
                            LocalName = "مخزن العناصر الرئيسى"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "secure");

                    b.HasData(
                        new
                        {
                            Id = "496edaa7-eadf-481d-b160-c4a2e7888787",
                            ConcurrencyStamp = "496edaa7-eadf-aefd-b160-c4a2e7557487",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "496edaa7-1098-481d-b160-c4e489333b87",
                            ConcurrencyStamp = "496feac7-eadf-aefd-9786-c4a2e7333b87",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "secure");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "secure");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "secure");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "secure");

                    b.HasData(
                        new
                        {
                            UserId = "496edaa7-eadf-481d-89ea-9172e7333b87",
                            RoleId = "496edaa7-eadf-481d-b160-c4a2e7888787"
                        },
                        new
                        {
                            UserId = "496edaa7-eadf-481d-89ea-9172e7333b87",
                            RoleId = "496edaa7-1098-481d-b160-c4e489333b87"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "secure");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.Store", "Store")
                        .WithMany("Employees")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialGroup", b =>
                {
                    b.HasOne("Entities.Models.Material.MaterialType", "MaterialType")
                        .WithMany("MaterialGroups")
                        .HasForeignKey("MTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialItem", b =>
                {
                    b.HasOne("Entities.Models.Material.MaterialGroup", "MaterialGroup")
                        .WithMany("MaterialItems")
                        .HasForeignKey("MGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialGroup");
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialItemUnit", b =>
                {
                    b.HasOne("Entities.Models.Material.MaterialItem", "MaterialItem")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Material.MaterialUnit", "MaterialUnit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialItem");

                    b.Navigation("MaterialUnit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialGroup", b =>
                {
                    b.Navigation("MaterialItems");
                });

            modelBuilder.Entity("Entities.Models.Material.MaterialType", b =>
                {
                    b.Navigation("MaterialGroups");
                });

            modelBuilder.Entity("Entities.Models.Store", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
